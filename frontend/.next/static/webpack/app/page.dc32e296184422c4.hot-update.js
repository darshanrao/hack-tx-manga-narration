"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./utils/pageAudioManager.ts":
/*!***********************************!*\
  !*** ./utils/pageAudioManager.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API_ENDPOINTS: () => (/* binding */ API_ENDPOINTS),\n/* harmony export */   convertSupabaseToLocal: () => (/* binding */ convertSupabaseToLocal),\n/* harmony export */   findActiveTranscriptEntry: () => (/* binding */ findActiveTranscriptEntry),\n/* harmony export */   loadTranscriptData: () => (/* binding */ loadTranscriptData),\n/* harmony export */   organizePageAudioFiles: () => (/* binding */ organizePageAudioFiles),\n/* harmony export */   parseAudioFilename: () => (/* binding */ parseAudioFilename),\n/* harmony export */   parseTranscriptContent: () => (/* binding */ parseTranscriptContent),\n/* harmony export */   parseTranscriptFilename: () => (/* binding */ parseTranscriptFilename),\n/* harmony export */   updateTranscriptActiveState: () => (/* binding */ updateTranscriptActiveState)\n/* harmony export */ });\n// File: frontend/utils/pageAudioManager.ts\n/**\r\n * Parses filename to extract chapter and page information\r\n * Expected format: ch{chapter}_page{page}_dialogue_{timestamp}.mp3\r\n * Example: ch01_page01_dialogue_20251018_220717.mp3\r\n */ function parseAudioFilename(filename) {\n    const match = filename.match(/ch(\\d+)_page(\\d+)_dialogue/);\n    if (!match) return null;\n    return {\n        chapterNumber: parseInt(match[1], 10),\n        pageNumber: parseInt(match[2], 10)\n    };\n}\n/**\r\n * Parses transcript filename to extract chapter and page information\r\n * Expected format: ch{chapter}_page{page}_transcript_{timestamp}.txt\r\n * Example: ch01_page01_transcript_20251018_220717.txt\r\n */ function parseTranscriptFilename(filename) {\n    const match = filename.match(/ch(\\d+)_page(\\d+)_transcript/);\n    if (!match) return null;\n    return {\n        chapterNumber: parseInt(match[1], 10),\n        pageNumber: parseInt(match[2], 10)\n    };\n}\n/**\r\n * Groups audio and transcript files by chapter and page\r\n */ function organizePageAudioFiles(audioFiles, transcriptFiles) {\n    let baseUrl = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : '/assets';\n    // Ensure we join baseUrl and filenames without producing protocol-relative URLs (e.g., //file)\n    const joinUrlPath = (root, filename)=>{\n        if (!root || root === '/') {\n            return \"/\".concat(filename);\n        }\n        const trimmed = root.endsWith('/') ? root.slice(0, -1) : root;\n        return \"\".concat(trimmed, \"/\").concat(filename);\n    };\n    const chaptersMap = new Map();\n    // Process audio files\n    audioFiles.forEach((filename)=>{\n        const parsed = parseAudioFilename(filename);\n        if (!parsed) return;\n        const { chapterNumber, pageNumber } = parsed;\n        if (!chaptersMap.has(chapterNumber)) {\n            chaptersMap.set(chapterNumber, new Map());\n        }\n        const chapterPages = chaptersMap.get(chapterNumber);\n        if (!chapterPages.has(pageNumber)) {\n            chapterPages.set(pageNumber, {\n                pageNumber,\n                chapterNumber,\n                audioUrl: '',\n                transcriptUrl: ''\n            });\n        }\n        chapterPages.get(pageNumber).audioUrl = joinUrlPath(baseUrl, filename);\n    });\n    // Process transcript files\n    transcriptFiles.forEach((filename)=>{\n        const parsed = parseTranscriptFilename(filename);\n        if (!parsed) return;\n        const { chapterNumber, pageNumber } = parsed;\n        if (!chaptersMap.has(chapterNumber)) {\n            chaptersMap.set(chapterNumber, new Map());\n        }\n        const chapterPages = chaptersMap.get(chapterNumber);\n        if (!chapterPages.has(pageNumber)) {\n            chapterPages.set(pageNumber, {\n                pageNumber,\n                chapterNumber,\n                audioUrl: '',\n                transcriptUrl: ''\n            });\n        }\n        chapterPages.get(pageNumber).transcriptUrl = joinUrlPath(baseUrl, filename);\n    });\n    // Convert to array format\n    const chapters = [];\n    chaptersMap.forEach((pages, chapterNumber)=>{\n        const pageArray = Array.from(pages.values()).sort((a, b)=>a.pageNumber - b.pageNumber);\n        chapters.push({\n            chapterNumber,\n            pages: pageArray,\n            totalPages: pageArray.length\n        });\n    });\n    const result = chapters.sort((a, b)=>a.chapterNumber - b.chapterNumber);\n    return result;\n}\n/**\r\n * Loads transcript data from URL\r\n */ async function loadTranscriptData(transcriptUrl) {\n    try {\n        const response = await fetch(transcriptUrl);\n        if (!response.ok) {\n            throw new Error(\"Failed to load transcript: \".concat(response.statusText));\n        }\n        const content = await response.text();\n        const parsed = parseTranscriptContent(content);\n        return parsed;\n    } catch (error) {\n        console.error('Error loading transcript:', error);\n        return [];\n    }\n}\n/**\r\n * Parses transcript content into structured entries\r\n */ function parseTranscriptContent(content) {\n    const lines = content.trim().split('\\n');\n    const entries = [];\n    lines.forEach((line, index)=>{\n        const match = line.match(/^(\\d{2}:\\d{2})\\s+(.+?):\\s+(.+)$/);\n        if (match) {\n            const [, timeStr, speaker, text] = match;\n            const [minutes, seconds] = timeStr.split(':').map(Number);\n            const timestamp = minutes * 60 + seconds;\n            entries.push({\n                id: \"entry-\".concat(index),\n                timestamp,\n                speaker: speaker.trim(),\n                text: text.trim(),\n                isActive: false\n            });\n        }\n    });\n    return entries;\n}\n/**\r\n * Finds the active transcript entry based on current time\r\n */ function findActiveTranscriptEntry(entries, currentTime) {\n    let activeEntry = null;\n    for(let i = 0; i < entries.length; i++){\n        const entry = entries[i];\n        const nextEntry = entries[i + 1];\n        if (currentTime >= entry.timestamp && (!nextEntry || currentTime < nextEntry.timestamp)) {\n            activeEntry = entry;\n            break;\n        }\n    }\n    return activeEntry;\n}\n/**\r\n * Updates active state for transcript entries\r\n */ function updateTranscriptActiveState(entries, currentTime) {\n    return entries.map((entry)=>{\n        var _entries_find;\n        return {\n            ...entry,\n            isActive: entry.timestamp <= currentTime && (((_entries_find = entries.find((e)=>e.timestamp > entry.timestamp)) === null || _entries_find === void 0 ? void 0 : _entries_find.timestamp) || Infinity) > currentTime\n        };\n    });\n}\n/**\r\n * Converts Supabase data to local format\r\n */ function convertSupabaseToLocal(supabaseData) {\n    const chaptersMap = new Map();\n    supabaseData.forEach((item)=>{\n        if (!chaptersMap.has(item.chapter_number)) {\n            chaptersMap.set(item.chapter_number, new Map());\n        }\n        const chapterPages = chaptersMap.get(item.chapter_number);\n        chapterPages.set(item.page_number, {\n            pageNumber: item.page_number,\n            chapterNumber: item.chapter_number,\n            audioUrl: item.audio_url,\n            transcriptUrl: item.transcript_url,\n            transcriptData: item.transcript_content ? parseTranscriptContent(item.transcript_content) : undefined,\n            duration: item.duration\n        });\n    });\n    const chapters = [];\n    chaptersMap.forEach((pages, chapterNumber)=>{\n        const pageArray = Array.from(pages.values()).sort((a, b)=>a.pageNumber - b.pageNumber);\n        chapters.push({\n            chapterNumber,\n            pages: pageArray,\n            totalPages: pageArray.length\n        });\n    });\n    return chapters.sort((a, b)=>a.chapterNumber - b.chapterNumber);\n}\n/**\r\n * API endpoint helpers for future integration\r\n */ const API_ENDPOINTS = {\n    GET_PAGE_AUDIO: (chapterNumber, pageNumber)=>\"/api/chapters/\".concat(chapterNumber, \"/pages/\").concat(pageNumber, \"/audio\"),\n    GET_CHAPTER_AUDIO: (chapterNumber)=>\"/api/chapters/\".concat(chapterNumber, \"/audio\"),\n    GET_TRANSCRIPT: (chapterNumber, pageNumber)=>\"/api/chapters/\".concat(chapterNumber, \"/pages/\").concat(pageNumber, \"/transcript\"),\n    UPLOAD_PAGE_AUDIO: (chapterNumber, pageNumber)=>\"/api/chapters/\".concat(chapterNumber, \"/pages/\").concat(pageNumber, \"/audio/upload\")\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/pageAudioManager.ts\n"));

/***/ })

});