"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./components/AudioPlayer.tsx":
/*!************************************!*\
  !*** ./components/AudioPlayer.tsx ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioPlayer: () => (/* binding */ AudioPlayer)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ AudioPlayer auto */ \nvar _s = $RefreshSig$();\n\nfunction AudioPlayer(param) {\n    let { audioUrl, isPlaying, volume, speed, isMuted, currentTime, onTimeUpdate, onDurationChange, onEnded, onError, onLoadStart, onCanPlay } = param;\n    _s();\n    const audioRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const previousUrlRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)('');\n    const lastSeekTimeRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    const isSeekingRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    // Update audio properties when they change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AudioPlayer.useEffect\": ()=>{\n            const audio = audioRef.current;\n            if (!audio) return;\n            audio.volume = isMuted ? 0 : volume;\n            audio.playbackRate = speed;\n        }\n    }[\"AudioPlayer.useEffect\"], [\n        volume,\n        speed,\n        isMuted\n    ]);\n    // Handle seeking when currentTime changes externally\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AudioPlayer.useEffect\": ()=>{\n            const audio = audioRef.current;\n            if (!audio) return;\n            // Only seek if the difference is significant (more than 0.5 seconds)\n            // This prevents stuttering during normal playback while allowing proper seeking\n            const timeDifference = Math.abs(audio.currentTime - currentTime);\n            if (timeDifference > 0.5) {\n                audio.currentTime = currentTime;\n            }\n        }\n    }[\"AudioPlayer.useEffect\"], [\n        currentTime\n    ]);\n    // Handle play/pause with readiness guard\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AudioPlayer.useEffect\": ()=>{\n            const audio = audioRef.current;\n            if (!audio) return;\n            if (isPlaying) {\n                // If not ready, wait for canplay then attempt to play once\n                if (!audio.src) return;\n                const tryPlay = {\n                    \"AudioPlayer.useEffect.tryPlay\": ()=>{\n                        audio.play().catch({\n                            \"AudioPlayer.useEffect.tryPlay\": (error)=>{\n                                if (error.name === 'AbortError') {\n                                    console.log('Audio play was aborted (likely due to source change)');\n                                    return;\n                                }\n                                console.error('Error playing audio:', error);\n                                onError();\n                            }\n                        }[\"AudioPlayer.useEffect.tryPlay\"]);\n                    }\n                }[\"AudioPlayer.useEffect.tryPlay\"];\n                if (audio.readyState >= 2) {\n                    tryPlay();\n                } else {\n                    const onCanPlayOnce = {\n                        \"AudioPlayer.useEffect.onCanPlayOnce\": ()=>{\n                            audio.removeEventListener('canplay', onCanPlayOnce);\n                            tryPlay();\n                        }\n                    }[\"AudioPlayer.useEffect.onCanPlayOnce\"];\n                    audio.addEventListener('canplay', onCanPlayOnce);\n                }\n            } else {\n                audio.pause();\n            }\n        }\n    }[\"AudioPlayer.useEffect\"], [\n        isPlaying,\n        onError\n    ]);\n    // Set up event listeners\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AudioPlayer.useEffect\": ()=>{\n            const audio = audioRef.current;\n            if (!audio) return;\n            const handleTimeUpdate = {\n                \"AudioPlayer.useEffect.handleTimeUpdate\": ()=>onTimeUpdate(audio.currentTime)\n            }[\"AudioPlayer.useEffect.handleTimeUpdate\"];\n            const handleLoadedMetadata = {\n                \"AudioPlayer.useEffect.handleLoadedMetadata\": ()=>onDurationChange(audio.duration)\n            }[\"AudioPlayer.useEffect.handleLoadedMetadata\"];\n            const handleEnded = {\n                \"AudioPlayer.useEffect.handleEnded\": ()=>onEnded()\n            }[\"AudioPlayer.useEffect.handleEnded\"];\n            const handleError = {\n                \"AudioPlayer.useEffect.handleError\": ()=>{\n                    // Prevent looping caused by rapid error -> play attempts\n                    audio.pause();\n                    onError();\n                }\n            }[\"AudioPlayer.useEffect.handleError\"];\n            const handleLoadStart = {\n                \"AudioPlayer.useEffect.handleLoadStart\": ()=>onLoadStart === null || onLoadStart === void 0 ? void 0 : onLoadStart()\n            }[\"AudioPlayer.useEffect.handleLoadStart\"];\n            const handleCanPlay = {\n                \"AudioPlayer.useEffect.handleCanPlay\": ()=>onCanPlay === null || onCanPlay === void 0 ? void 0 : onCanPlay()\n            }[\"AudioPlayer.useEffect.handleCanPlay\"];\n            audio.addEventListener('timeupdate', handleTimeUpdate);\n            audio.addEventListener('loadedmetadata', handleLoadedMetadata);\n            audio.addEventListener('ended', handleEnded);\n            audio.addEventListener('error', handleError);\n            audio.addEventListener('loadstart', handleLoadStart);\n            audio.addEventListener('canplay', handleCanPlay);\n            return ({\n                \"AudioPlayer.useEffect\": ()=>{\n                    audio.removeEventListener('timeupdate', handleTimeUpdate);\n                    audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\n                    audio.removeEventListener('ended', handleEnded);\n                    audio.removeEventListener('error', handleError);\n                    audio.removeEventListener('loadstart', handleLoadStart);\n                    audio.removeEventListener('canplay', handleCanPlay);\n                }\n            })[\"AudioPlayer.useEffect\"];\n        }\n    }[\"AudioPlayer.useEffect\"], [\n        onTimeUpdate,\n        onDurationChange,\n        onEnded,\n        onError,\n        onLoadStart,\n        onCanPlay\n    ]);\n    // Update src when audioUrl changes and preserve playback settings\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AudioPlayer.useEffect\": ()=>{\n            const audio = audioRef.current;\n            if (!audio) return;\n            // Only change source if the URL actually changed\n            if (audioUrl && audioUrl !== previousUrlRef.current) {\n                // Normalize relative URLs to root-relative\n                const normalizedUrl = audioUrl.startsWith('http') || audioUrl.startsWith('/') ? audioUrl : \"/\".concat(audioUrl);\n                // Pause current audio before changing source to prevent AbortError\n                audio.pause();\n                audio.src = normalizedUrl;\n                audio.load();\n                // Re-apply current playback settings after changing source\n                audio.playbackRate = speed;\n                audio.volume = isMuted ? 0 : volume;\n                previousUrlRef.current = normalizedUrl;\n                // If we should be playing, attempt to play or wait for readiness\n                if (isPlaying) {\n                    const tryPlay = {\n                        \"AudioPlayer.useEffect.tryPlay\": ()=>{\n                            audio.play().catch({\n                                \"AudioPlayer.useEffect.tryPlay\": (error)=>{\n                                    if (error.name === 'AbortError') {\n                                        console.log('Audio play was aborted (likely due to source change)');\n                                        return;\n                                    }\n                                    console.error('Error playing audio:', error);\n                                    onError();\n                                }\n                            }[\"AudioPlayer.useEffect.tryPlay\"]);\n                        }\n                    }[\"AudioPlayer.useEffect.tryPlay\"];\n                    if (audio.readyState >= 2) {\n                        tryPlay();\n                    } else {\n                        const onCanPlayOnce = {\n                            \"AudioPlayer.useEffect.onCanPlayOnce\": ()=>{\n                                audio.removeEventListener('canplay', onCanPlayOnce);\n                                tryPlay();\n                            }\n                        }[\"AudioPlayer.useEffect.onCanPlayOnce\"];\n                        audio.addEventListener('canplay', onCanPlayOnce);\n                    }\n                }\n            }\n        }\n    }[\"AudioPlayer.useEffect\"], [\n        audioUrl,\n        onError,\n        isPlaying,\n        speed,\n        volume,\n        isMuted\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"audio\", {\n        ref: audioRef,\n        preload: \"metadata\",\n        style: {\n            display: 'none'\n        },\n        children: previousUrlRef.current && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"source\", {\n            src: previousUrlRef.current,\n            type: \"audio/mpeg\"\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\brady\\\\Desktop\\\\Portfolio\\\\hack-tx-manga-narration\\\\frontend\\\\components\\\\AudioPlayer.tsx\",\n            lineNumber: 179,\n            columnNumber: 9\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\brady\\\\Desktop\\\\Portfolio\\\\hack-tx-manga-narration\\\\frontend\\\\components\\\\AudioPlayer.tsx\",\n        lineNumber: 172,\n        columnNumber: 5\n    }, this);\n}\n_s(AudioPlayer, \"6NLItUtSbzO3H5d/NY9ogSpvFDo=\");\n_c = AudioPlayer;\nvar _c;\n$RefreshReg$(_c, \"AudioPlayer\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/AudioPlayer.tsx\n"));

/***/ })

});